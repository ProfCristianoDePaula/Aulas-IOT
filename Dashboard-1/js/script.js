// üîó URL do broker MQTT usando WebSocket seguro (SSL/TLS na porta 8884)
const brokerUrl = "wss://broker.hivemq.com:8884/mqtt";

// üì° T√≥picos MQTT utilizados no projeto
const topicoSensor = "senai790/lerSensor";  // T√≥pico que envia dados do sensor
const topicoLed1 = "senai790/led1";         // T√≥pico para controlar o LED 1
const topicoLed2 = "senai790/led2";         // T√≥pico para controlar o LED 2

// üÜî Gera um ID √∫nico para o cliente MQTT (evita conflito de conex√µes)
const clientID = "webClient_" + Math.floor(Math.random() * 10000);

// üß† Cria uma inst√¢ncia do cliente MQTT da biblioteca Paho usando WSS
const client = new Paho.MQTT.Client(brokerUrl, clientID);

// ‚ö†Ô∏è Define fun√ß√£o chamada automaticamente quando a conex√£o √© perdida
client.onConnectionLost = (responseObject) => {
  console.error("üîå Conex√£o perdida:", responseObject.errorMessage);
};

// üì• Define fun√ß√£o chamada automaticamente quando uma mensagem chega
client.onMessageArrived = (message) => {
  console.log("üì• Mensagem recebida:", message.destinationName, message.payloadString);

  // Verifica se a mensagem recebida √© do t√≥pico de leitura do sensor
  if (message.destinationName === topicoSensor) {
    try {
      // Converte a string JSON recebida em um objeto JavaScript
      const dados = JSON.parse(message.payloadString);

      // Atualiza elementos HTML com os valores de temperatura e umidade
      document.getElementById("temp").innerText = dados.temperatura;
      document.getElementById("umid").innerText = dados.umidade;

    } catch (e) {
      // Exibe erro se o JSON estiver malformado
      console.error("‚ùå Erro ao parsear JSON:", e);
    }
  }
};

// üîó Conecta o cliente ao broker MQTT com SSL ativado
client.connect({
  useSSL: true, // obrigat√≥rio para conex√µes WSS (WebSocket Secure)

  // ‚úÖ Se conectar com sucesso, mostra mensagem e se inscreve no t√≥pico do sensor
  onSuccess: () => {
    console.log("‚úÖ Conectado ao broker MQTT");
    client.subscribe(topicoSensor); // come√ßa a escutar dados do sensor
  },

  // ‚ùå Se falhar ao conectar, exibe mensagem de erro
  onFailure: (err) => {
    console.error("‚ùå Falha na conex√£o:", err);
  }
});


// üí° Fun√ß√£o para enviar comando a um dos LEDs via MQTT
function enviarComando(led, estado) {
  // Escolhe o t√≥pico correto com base no LED selecionado
  const topico = led === "led1" ? topicoLed1 : topicoLed2;

  // Cria a mensagem MQTT com o estado desejado ("1" ou "0")
  const message = new Paho.MQTT.Message(estado);

  // Define para qual t√≥pico essa mensagem ser√° enviada
  message.destinationName = topico;

  // Envia a mensagem ao broker
  client.send(message);

  // Log no console indicando que a mensagem foi enviada
  console.log(`üì§ Enviado para ${topico}: ${estado}`);
}